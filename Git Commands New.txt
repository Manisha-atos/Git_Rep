:w--save
:qa--to quit
:wq--save and quit
Day 1:
software:
==========
https://git-scm.com/downloads

Git Tools.
==========
Git bash
Git UI

gt --version
git config --list

Setting up name and e-mail address
==============================================================
git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"

Creating a Project
=======================================================================
mkdir hello
cd hello
touch hello.html


Create a repository
===================
git init


Staging and committing
==========================================================================
git status
git add hello.html
git add .  --will add all files to staging area

we can stage and commits in small commits.

git add a.html
git add b.html
git commit -m "Changes for a and b"
git add c.html
git commit -m "Unrelated change to c"

git ls-files--list the files 

===========================Inspecting &Tracking commands=========================
git status
git log
git diff

git History
How to view Git Commit History of specific intervals?
It is a self-explanatory option in git log. When we type the command:
git log –since=<date>
git hist

Diff command is used in git to track the difference between the changes made on a file. show the diffe between old and new content.


============================================================

Restoring changes
==================
git restore hello.txt -- to discard changes in working directory
git restore --stage hello.txt


Changes, not files
==================

One line history
==================================================================
You fully control what the log shows. I like the single line format:
RUN:
git log --pretty=oneline
Controlling the display of entries
------------------------------------
There are many options to choose which entries appear in the log. Play around with the following 
parameters:
git log --pretty=oneline --max-count=2
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'
git log --pretty=oneline --author=<your name>
git log --pretty=oneline --all

Let’s look at it in detail:
• --pretty="..." defines the output format.
• %h is the abbreviated hash of the commit
• %d commit decorations (e.g. branch heads or tags)
• %ad is the commit date
• %s is the comment
• %an is the name of the author
• --graph tells git to display the commit tree in the form of an ASCII graph layout
• --date=short keeps the date format short and nice

Aliases
===================================================================
For Windows users:
RUN:
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
git config --global alias.type 'cat-file -t'
git config --global alias.dump 'cat-file -p'

git hist
 git hist
* a15d730 2023-09-04 | second commit (HEAD -> master) [Manisha-atos]
* 64e09d3 2023-09-04 | first commit [Manisha-atos]
* 1deb8fb 2023-09-04 | secone commit [Manisha-atos]
* a974c90 2023-09-04 | First commit:wq [Manisha-atos]

git checkout <hash>
git chekout a15d730
git hello.html

Tagging the version
========================================================================
